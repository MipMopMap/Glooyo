{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { deleteDoc, doc } from \"firebase/firestore\";\nimport { deleteObject, ref } from \"firebase/storage\";\nfunction useDeleteDocument(db, storage) {\n  _s();\n  const [data, setData] = useState([]);\n  const handleDeleteDocument = async documentId => {\n    const documentData = data.find(item => item.id === documentId);\n    const imageRef1 = ref(storage, documentData.imageURL1);\n    const imageRef2 = ref(storage, documentData.imageURL2);\n    try {\n      await deleteDoc(doc(db, \"glooyaData\", documentId));\n      await Promise.all([deleteObject(imageRef1), deleteObject(imageRef2)]);\n      console.log(\"Document and images successfully deleted.\");\n    } catch (error) {\n      console.error(\"Error deleting document and images:\", error);\n    }\n    setData(prevData => prevData.filter(item => item.id !== documentId));\n  };\n  return handleDeleteDocument;\n}\n_s(useDeleteDocument, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\nexport default useDeleteDocument;","map":{"version":3,"names":["useState","deleteDoc","doc","deleteObject","ref","useDeleteDocument","db","storage","_s","data","setData","handleDeleteDocument","documentId","documentData","find","item","id","imageRef1","imageURL1","imageRef2","imageURL2","Promise","all","console","log","error","prevData","filter"],"sources":["/Users/dortagger/Desktop/Code/glooyot/src/hooks/useDeleteDocument.ts"],"sourcesContent":["import { useState } from \"react\";\nimport { Firestore, deleteDoc, doc } from \"firebase/firestore\";\nimport { FirebaseStorage, deleteObject, ref } from \"firebase/storage\";\n\nfunction useDeleteDocument(db: Firestore, storage: FirebaseStorage) {\n  const [data, setData] = useState<any[]>([]);\n\n  const handleDeleteDocument = async (documentId: string) => {\n    const documentData = data.find((item) => item.id === documentId);\n    const imageRef1 = ref(storage, documentData.imageURL1);\n    const imageRef2 = ref(storage, documentData.imageURL2);\n\n    try {\n      await deleteDoc(doc(db, \"glooyaData\", documentId));\n      await Promise.all([deleteObject(imageRef1), deleteObject(imageRef2)]);\n      console.log(\"Document and images successfully deleted.\");\n    } catch (error) {\n      console.error(\"Error deleting document and images:\", error);\n    }\n    setData((prevData) => prevData.filter((item) => item.id !== documentId));\n  };\n\n  return handleDeleteDocument;\n}\n\nexport default useDeleteDocument;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAAoBC,SAAS,EAAEC,GAAG,QAAQ,oBAAoB;AAC9D,SAA0BC,YAAY,EAAEC,GAAG,QAAQ,kBAAkB;AAErE,SAASC,iBAAiBA,CAACC,EAAa,EAAEC,OAAwB,EAAE;EAAAC,EAAA;EAClE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAQ,EAAE,CAAC;EAE3C,MAAMW,oBAAoB,GAAG,MAAOC,UAAkB,IAAK;IACzD,MAAMC,YAAY,GAAGJ,IAAI,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,UAAU,CAAC;IAChE,MAAMK,SAAS,GAAGb,GAAG,CAACG,OAAO,EAAEM,YAAY,CAACK,SAAS,CAAC;IACtD,MAAMC,SAAS,GAAGf,GAAG,CAACG,OAAO,EAAEM,YAAY,CAACO,SAAS,CAAC;IAEtD,IAAI;MACF,MAAMnB,SAAS,CAACC,GAAG,CAACI,EAAE,EAAE,YAAY,EAAEM,UAAU,CAAC,CAAC;MAClD,MAAMS,OAAO,CAACC,GAAG,CAAC,CAACnB,YAAY,CAACc,SAAS,CAAC,EAAEd,YAAY,CAACgB,SAAS,CAAC,CAAC,CAAC;MACrEI,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;IACAf,OAAO,CAAEgB,QAAQ,IAAKA,QAAQ,CAACC,MAAM,CAAEZ,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,UAAU,CAAC,CAAC;EAC1E,CAAC;EAED,OAAOD,oBAAoB;AAC7B;AAACH,EAAA,CAnBQH,iBAAiB;AAqB1B,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}