{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { collection, getDocs } from \"firebase/firestore\";\nconst useFetchData = db => {\n  _s();\n  const [data, setData] = useState([]);\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!db) return;\n      const querySnapshot = await getDocs(collection(db, \"glooyaData\"));\n      const tagsQuerySnapshot = await getDocs(collection(db, \"tags\"));\n      const fetchedTags = tagsQuerySnapshot.docs.map(doc => {\n        const data = doc.data();\n        return data.selectOptions;\n      });\n      setOptions(fetchedTags[0]);\n      const fetchedData = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setData(fetchedData);\n    };\n    fetchData();\n  }, [db]);\n  return {\n    data,\n    setData,\n    options,\n    setOptions\n  };\n};\n_s(useFetchData, \"5KX8rtlCAanv3+yAmYa8av6xKYA=\");\nexport default useFetchData;","map":{"version":3,"names":["useEffect","useState","collection","getDocs","useFetchData","db","_s","data","setData","options","setOptions","fetchData","querySnapshot","tagsQuerySnapshot","fetchedTags","docs","map","doc","selectOptions","fetchedData","id"],"sources":["/Users/dortagger/Desktop/Code/glooyot/src/hooks/useFetchData.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  Firestore,\n  collection,\n  getDocs,\n  DocumentData,\n} from \"firebase/firestore\";\n\ninterface DataItem {\n  id: string;\n  [key: string]: any;\n}\n\ninterface Option {\n  value: string;\n  label: string;\n}\n\nconst useFetchData = (db: Firestore | null) => {\n  const [data, setData] = useState<DataItem[]>([]);\n  const [options, setOptions] = useState<Option[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!db) return;\n\n      const querySnapshot = await getDocs(collection(db, \"glooyaData\"));\n      const tagsQuerySnapshot = await getDocs(collection(db, \"tags\"));\n\n      const fetchedTags = tagsQuerySnapshot.docs.map((doc) => {\n        const data = doc.data();\n        return data.selectOptions;\n      });\n      setOptions(fetchedTags[0]);\n\n      const fetchedData = querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...(doc.data() as DocumentData),\n      }));\n      setData(fetchedData);\n    };\n\n    fetchData();\n  }, [db]);\n\n  return { data, setData, options, setOptions };\n};\n\nexport default useFetchData;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAEEC,UAAU,EACVC,OAAO,QAEF,oBAAoB;AAY3B,MAAMC,YAAY,GAAIC,EAAoB,IAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAa,EAAE,CAAC;EAChD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI,CAACN,EAAE,EAAE;MAET,MAAMO,aAAa,GAAG,MAAMT,OAAO,CAACD,UAAU,CAACG,EAAE,EAAE,YAAY,CAAC,CAAC;MACjE,MAAMQ,iBAAiB,GAAG,MAAMV,OAAO,CAACD,UAAU,CAACG,EAAE,EAAE,MAAM,CAAC,CAAC;MAE/D,MAAMS,WAAW,GAAGD,iBAAiB,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAK;QACtD,MAAMV,IAAI,GAAGU,GAAG,CAACV,IAAI,CAAC,CAAC;QACvB,OAAOA,IAAI,CAACW,aAAa;MAC3B,CAAC,CAAC;MACFR,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC;MAE1B,MAAMK,WAAW,GAAGP,aAAa,CAACG,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;QACnDG,EAAE,EAAEH,GAAG,CAACG,EAAE;QACV,GAAIH,GAAG,CAACV,IAAI,CAAC;MACf,CAAC,CAAC,CAAC;MACHC,OAAO,CAACW,WAAW,CAAC;IACtB,CAAC;IAEDR,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACN,EAAE,CAAC,CAAC;EAER,OAAO;IAAEE,IAAI;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAW,CAAC;AAC/C,CAAC;AAACJ,EAAA,CA5BIF,YAAY;AA8BlB,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}